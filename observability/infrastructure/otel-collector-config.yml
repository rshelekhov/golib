# OpenTelemetry Collector Configuration
# Central component for receiving, processing and exporting all observability signals

receivers:
  # OTLP receiver - receives data from applications
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver - scrapes metrics (optional)
  prometheus:
    config:
      scrape_configs:
        - job_name: "demo-app"
          static_configs:
            - targets: ["demo-app:8080"]

processors:
  # Batch processor - groups data for efficient sending
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter - protection from OOM
  memory_limiter:
    limit_mib: 512

  # Resource processor - adds metadata
  resource:
    attributes:
      - key: environment
        value: docker
        action: upsert

exporters:
  # Jaeger exporter - sends traces to Jaeger
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Prometheus exporter - exports metrics for Prometheus
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      environment: docker

  # Loki exporter - sends logs to Loki
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    tenant_id: "tenant1"

  # OTLP exporter for Tempo (Jaeger alternative)
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true

  # Logging exporter - for debugging (outputs to console)
  logging:
    loglevel: debug

service:
  pipelines:
    # Pipeline for traces
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [jaeger, otlp/tempo, logging]

    # Pipeline for metrics
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch, resource]
      exporters: [prometheus, logging]

    # Pipeline for logs
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [loki, logging]

  extensions: []
